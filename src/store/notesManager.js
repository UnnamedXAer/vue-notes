import axios from "../axios/axios";
import config from "../config/config";
import Note from "../models/note";

const NOTES = "/notes";

const managerStore = {
  state: {
    loggedUserId: "hardcoded_id",
    notesError: "",
    notes: [],
    total: -1,
    model: new Note(),
    formLoading: false,
    formError: ""
  },
  mutations: {
    setError(state, msg) {
      state.notesError = msg;
    },
    setModel(state, model) {
      state.model = { ...model };
    },
    modelChange(state, payload) {
      state.model = { ...state.model, [payload.prop]: payload.value };
    },
    clearModel(state) {
      state.model = new Note();
    },
    setFormLoading(state, loading) {
      state.formLoading = loading;
    },
    setFormError(state, msg) {
      state.formError = msg;
    },

    setNotes(state, { notes, total, pageIdx }) {
      const updatedNotes = [...state.notes];
      updatedNotes[pageIdx] = notes;
      state.notes = updatedNotes;
      state.total = total;
    },

    addNote(state, note) {
      state.total = state.total + 1;
      const updatedNotes = [
        [note].concat(state.notes[0].splice(0, config.notesManagerPageSize - 1))
      ];

      state.notes = updatedNotes;
    },

    deleteNote(state, id) {
      if (state.model.id === id) {
        state.model = new Note();
      }
      for (let i = 0; i < state.notes.length; i++) {
        if (!state.notes[i]) {
          continue;
        }
        for (let j = 0; j < state.notes[i].length; j++) {
          if (state.notes[i][j].id === id) {
            const updatedNotes = [...state.notes];
            const updatedPageNotes = [...updatedNotes[i]];
            updatedPageNotes.splice(j, 1);
            updatedNotes[i] = updatedPageNotes;

            if (updatedPageNotes.length === 0 && updatedNotes.length > 1) {
              updatedNotes.splice(i);
            }

            state.notes = updatedNotes;
            state.total = state.total - 1;
            return;
          }
        }
      }
    },

    updateNote(state, model) {
      const id = model.id;
      for (let i = 0; i < state.notes.length; i++) {
        if (!state.notes[i]) {
          continue;
        }
        for (let j = 0; j < state.notes[i].length; j++) {
          if (state.notes[i][j].id === id) {
            const updatedNotes = [...state.notes];
            const updatedPageNotes = [...updatedNotes[i]];
            updatedPageNotes[j] = model;
            updatedNotes[i] = updatedPageNotes;
            state.notes = updatedNotes;
            return;
          }
        }
      }
    }
  },
  actions: {
    /**
     * @param {Note} model
     */
    async createNote(ctx, model) {
      ctx.commit("setFormError", "");
      ctx.commit("setFormLoading", true);

      model.author = ctx.state.loggedUserId;
      model.createdAt = model.editedAt = new Date();

      try {
        const payload = { ...model };
        // we will be using autogenerated _id.
        delete payload.id;
        const { data } = await axios.post(NOTES + "/_doc", payload);
        model.id = data._id;
        ctx.commit("addNote", model);
        ctx.commit("clearModel");
      } catch (err) {
        ctx.commit("setFormError", err.message);
        console.log(err);
      }
      ctx.commit("setFormLoading", false);
    },

    async updateNote(ctx, model) {
      ctx.commit("setFormError", "");
      ctx.commit("setFormLoading", true);
      try {
        const payload = { ...model };
        delete payload.id;
        payload.editedAt = new Date();
        const { data } = await axios.post(`${NOTES}/_doc/${model.id}/_update`, {
          doc: payload
        });
        model.editedAt = payload.editedAt;
        ctx.commit("updateNote", model);
        ctx.commit("clearModel");
      } catch (err) {
        ctx.commit(
          "setFormError",
          err.message || "Could not update note, please try again later."
        );
        console.log(err);
      }
      ctx.commit("setFormLoading", false);
    },
    async deleteNote(ctx, id) {
      ctx.commit("setError", "");
      try {
        const { data } = await axios.delete(NOTES + "/_doc/" + id);
        if (data.result === "not_found") {
          throw new Error("That not does not exist");
        }
        ctx.commit("deleteNote", id);
      } catch (err) {
        ctx.commit(
          "setError",
          err.message || "Could not delete note, please try again later."
        );
        console.error(err);
      }
    }
  }
};

export default managerStore;
